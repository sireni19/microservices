version: "3.7"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
    networks:
      - microservice-network

  kafka1:
    image: confluentinc/cp-enterprise-kafka:5.1.2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      KAFKA_JMX_PORT: 9991
    networks:
      - microservice-network

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.1.2
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - "8085:8085"
    networks:
      - microservice-network

  postgres:
    image: 'postgres:15.1-alpine'
    container_name: postgres
    networks:
      - microservice-network
    ports:
      - '5437:5432'
    environment:
      POSTGRES_DB: soldier-db
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpassword

    volumes:
      - postgres:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg-isready U postgres" ]
      start_period: 15s
      timeout: 3s
      interval: 10s
      retries: 12

  postgres2:
    image: 'postgres:15.1-alpine'
    container_name: postgres2
    networks:
      - microservice-network
    ports:
      - '5438:5432'
    environment:
      POSTGRES_DB: weapon-db
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpassword

    volumes:
      - postgres2:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg-isready U postgres" ]
      start_period: 15s
      timeout: 3s
      interval: 10s
      retries: 12


volumes:
  postgres:
  postgres2:


networks:
  microservice-network:
    name: microservice-network
    external: true